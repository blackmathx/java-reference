Test and explore
---------------------------------------------------------------------------------------------

1. Look at instance blocks of code. The rule is that static variables/blocks/methods
   in order then instance variables/blocks/methods in order
   
    private gills;
    { int test = gills;}

2. jar command

3.

4. To compile to another target directory: javac -d <folder> packagea/MyClass.java
   To run it: java -cp <classpathOrFolder> packagea.MyClass
   Also -cp = -classpath = --class-path
   Creating jars: https://www.baeldung.com/java-create-jar
   

5. java datatypes. p27

6. Each wrapper  has a valueOf() method such as Boolean.valueOf(true); Double.valueOf(1.0);
   The Integer.parseInt("123"); Double.parseDouble("2.3"); converts strings to primitives

7. Java reserved words p35. var is not a reserved word and may be used as an identifier, it is a reserved type name

8. var question; // DNC p43. final variables can be initialized like this. vars must on the same line
   question = 1;

9. numeric promotion
  a. java automatically promotes a value to the larger type
  b. if one is integral and other is floating point, java promotes integral to floating points type
  c. smaller types, byte short char, are first promoted to int any time used with binary arithmetic operators even if neither is an int. p75
      example: short x = 10;
               short y = 23;
               var z = x + y; // resulting in int


10. equals() vs ==
    a. Calling == on String objects will check whether they point to the same object in the pool
    b. Calling equals() on String objects will check the sequence of characters are the same
    c. Calling == on StringBuilder objects will check whether they point to the same StringBuilder object
    d. Calling equals() on StringBuidler objects will check whether they point to the same object (StringBuilder inherits equals from java.lang.Object)
    e. StringBuilder sb1 and sb2, compare values using sb1.toString().equals(sb2.toString())
    f. Calling String str = "string"; will check if it's in the pool already, calling String str = new String("string"); will add it to the heap
    g. Calling String str = " string".strip(); will add it to the heap. str1 += "other" returns a new string since strings immutable, like calling new String()
    h. Calling String str = new String("string").intern(); will tell java to use the string pool

11. Methods
    a. private, 'package' (no modifier, from a class within the same package), protected (class in the same package or a subclass), public
    b. local variable modifiers: final. Effectively final means it's not modified after assigned
    c. instance variable modifiers: private, 'package', protected, public. Also final (must be initialized once), volatile (this variable may be modified by othe threads),
        transient (means this should not be serialized with the class)
    d. varargs, can only be one and it must be last walk(int... steps); walk(int start, int... steps); Calling by passing in an array or list the elements
        walk(1, 2, 3); walk(new int[] {1, 2, 3});
    e. static methods and variables belong to the class not an instance, can be called without intantiating the class
    f. static imports used to improt static methods: import static java.util.Arrays.asList;


